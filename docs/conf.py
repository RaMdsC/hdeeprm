"""
Configuration for Sphinx documentation generation.
"""

import datetime
import os.path as path
import sys

# -- Path setup --------------------------------------------------------------

sys.path.insert(0, path.abspath('.'))
sys.path.insert(0, path.abspath('../'))

# -- Project information -----------------------------------------------------

import hdeeprm.__meta__ as meta

project = meta.NAME.lower()
author = meta.AUTHOR
copyright = f'{datetime.datetime.now().year}, {author}'
release = meta.VERSION
version = '.'.join(release.split('.')[0:2])

# -- Automatically generate API documentation --------------------------------

def run_apidoc(_):
    ignore_paths = [
        path.join('..', project.lower(), 'tests'),
    ]

    argv = [
        "--force",  # Overwrite output files
        "--follow-links",  # Follow symbolic links
        "--separate",  # Put each module file in its own page
        "--module-first",  # Put module documentation before submodule
        "-o", "source/packages",  # Output path
        path.join("..", project.lower()),
    ] + ignore_paths

    try:
        # Sphinx 1.7+
        from sphinx.ext import apidoc
        apidoc.main(argv)
    except ImportError:
        # Sphinx 1.6 (and earlier)
        from sphinx import apidoc
        argv.insert(0, apidoc.__file__)
        apidoc.main(argv)

def retitle_modules(_):
    pth = 'source/packages/modules.rst'
    lines = open(pth).read().splitlines()
    lines[0] = 'HDeepRM API'
    lines[1] = '==========='
    open(pth, 'w').write('\n'.join(lines))

def setup(app):
    app.connect('builder-inited', run_apidoc)
    app.connect('builder-inited', retitle_modules)

# -- General configuration ---------------------------------------------------

extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.intersphinx',
    'sphinx.ext.napoleon',
    'sphinx.ext.viewcode',
]

# Napoleon settings
napoleon_google_docstring = True
napoleon_numpy_docstring = True
napoleon_include_init_with_doc = True
napoleon_include_private_with_doc = False
napoleon_include_special_with_doc = False
napoleon_use_admonition_for_examples = False
napoleon_use_admonition_for_notes = False
napoleon_use_admonition_for_references = False
napoleon_use_ivar = False
napoleon_use_param = True
napoleon_use_rtype = True

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = None

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.
html_theme = 'alabaster'

html_theme_options = {
    'description': ('Framework for testing Deep Reinforcement Learning policies in heterogeneous '
                    'Workload Management'),
    'fixed_sidebar': 'true'
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

html_sidebars = {
    '**': [
        'badges.html'
    ]
}

# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = project + 'doc'

# -- Options for LaTeX output ------------------------------------------------

latex_elements = {}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, f'{project}.tex', f'{project} Documentation', meta.AUTHOR, 'manual'),
]

# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, project, f'{project} Documentation', [author], 1)
]

# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, project, f'{project} Documentation', author, project, meta.DESCRIPTION,
     'Miscellaneous'),
]

# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']

# -- Options for autodoc extension -------------------------------------------

# Mock torch due to excessive memory usage
autodoc_mock_imports = ['torch']

# -- Options for intersphinx extension ---------------------------------------

intersphinx_mapping = {
    'python': ('https://docs.python.org/', None),
    'procset': ('https://procset.readthedocs.io/en/stable/', None)
}
